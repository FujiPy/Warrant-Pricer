<!DOCTYPE html>
<html>
<head>
    <title>Interactive Webulls Warrant Pricing Calculator</title>
    <style>
        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f7f9fc;
        }
        .container {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            padding: 25px;
            margin-bottom: 20px;
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
        }
        h2 {
            color: #3498db;
            border-bottom: 1px solid #e1e1e1;
            padding-bottom: 10px;
            margin-top: 30px;
        }
        .input-group {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 20px;
        }
        .input-container {
            flex: 1;
            min-width: 200px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #555;
        }
        input[type="number"], input[type="range"] {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 5px;
        }
        input[type="range"] {
            margin-bottom: 0;
        }
        .value-display {
            text-align: right;
            font-size: 14px;
            color: #666;
        }
        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #2980b9;
        }
        .results {
            margin-top: 30px;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #3498db;
        }
        .result-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding-bottom: 10px;
            border-bottom: 1px dashed #ddd;
        }
        .result-row:last-child {
            border-bottom: none;
        }
        .result-label {
            font-weight: 600;
        }
        .result-value {
            font-weight: 700;
            color: #2c3e50;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            padding: 12px;
            text-align: center;
            border: 1px solid #ddd;
        }
        th {
            background-color: #f2f6ff;
            font-weight: 600;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .chart-container {
            margin-top: 30px;
            height: 400px;
        }
        .tabs {
            display: flex;
            margin-bottom: -1px;
        }
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border: 1px solid #ddd;
            border-bottom: none;
            background-color: #f1f1f1;
            border-radius: 5px 5px 0 0;
            margin-right: 5px;
        }
        .tab.active {
            background-color: white;
            border-bottom: 1px solid white;
        }
        .tab-content {
            display: none;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 0 5px 5px 5px;
        }
        .tab-content.active {
            display: block;
        }
        .sensitivity-table {
            overflow-x: auto;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Webulls Warrant (BULLZ) Pricing Calculator</h1>
        
        <div class="tabs">
            <div class="tab active" onclick="openTab(event, 'calculator')">Calculator</div>
            <div class="tab" onclick="openTab(event, 'timeAnalysis')">Time Analysis</div>
            <div class="tab" onclick="openTab(event, 'sensitivity')">Sensitivity Analysis</div>
        </div>
        
        <div id="calculator" class="tab-content active">
            <h2>Model Parameters</h2>
            <div class="input-group">
                <div class="input-container">
                    <label for="stockPrice">Current Stock Price (BULL):</label>
                    <input type="number" id="stockPrice" value="11" min="0" step="0.1" oninput="updateCalculations()">
                </div>
                <div class="input-container">
                    <label for="strikePrice">Strike Price:</label>
                    <input type="number" id="strikePrice" value="10" readonly>
                </div>
                <div class="input-container">
                    <label for="volatility">Volatility (%):</label>
                    <input type="number" id="volatility" value="45" min="5" max="150" step="1" oninput="updateCalculations()">
                    <input type="range" min="5" max="150" value="45" id="volatilityRange" oninput="syncRange('volatility', 'volatilityRange')">
                </div>
            </div>
            
            <div class="input-group">
                <div class="input-container">
                    <label for="riskFreeRate">Risk-Free Rate (%):</label>
                    <input type="number" id="riskFreeRate" value="3.5" min="0" max="10" step="0.1" oninput="updateCalculations()">
                    <input type="range" min="0" max="10" value="3.5" step="0.1" id="riskFreeRateRange" oninput="syncRange('riskFreeRate', 'riskFreeRateRange')">
                </div>
                <div class="input-container">
                    <label for="timeToExpiration">Time to Expiration (Years):</label>
                    <input type="number" id="timeToExpiration" value="5" min="0.1" max="10" step="0.1" oninput="updateCalculations()">
                    <input type="range" min="0.1" max="10" value="5" step="0.1" id="timeToExpirationRange" oninput="syncRange('timeToExpiration', 'timeToExpirationRange')">
                </div>
                <div class="input-container">
                    <label for="dilutionFactor">Dilution Factor:</label>
                    <input type="number" id="dilutionFactor" value="0.85" min="0.1" max="1" step="0.01" oninput="updateCalculations()">
                    <input type="range" min="0.1" max="1" value="0.85" step="0.01" id="dilutionFactorRange" oninput="syncRange('dilutionFactor', 'dilutionFactorRange')">
                </div>
            </div>
            
            <div class="input-group">
                <div class="input-container">
                    <label for="daysSinceListing">Days Since Listing:</label>
                    <input type="number" id="daysSinceListing" value="45" min="0" max="365" step="1" oninput="updateCalculations()">
                    <input type="range" min="0" max="365" value="45" id="daysSinceListingRange" oninput="syncRange('daysSinceListing', 'daysSinceListingRange')">
                    <div class="value-display"><span id="daysSinceListingDisplay">45</span> days</div>
                </div>
                <div class="input-container">
                    <label for="minimumHoldDays">Minimum Hold Period (Days):</label>
                    <input type="number" id="minimumHoldDays" value="30" min="0" max="90" step="1" oninput="updateCalculations()">
                </div>
                <div class="input-container">
                    <label for="illiquidityDiscount">Illiquidity Discount During Hold (%):</label>
                    <input type="number" id="illiquidityDiscount" value="20" min="0" max="50" step="1" oninput="updateCalculations()">
                    <input type="range" min="0" max="50" value="20" id="illiquidityDiscountRange" oninput="syncRange('illiquidityDiscount', 'illiquidityDiscountRange')">
                </div>
            </div>
            
            <div class="results">
                <h2>Warrant Valuation Results</h2>
                <div class="result-row">
                    <span class="result-label">Basic Black-Scholes Value:</span>
                    <span class="result-value" id="bsValue">$2.81</span>
                </div>
                <div class="result-row">
                    <span class="result-label">Dilution-Adjusted Value:</span>
                    <span class="result-value" id="dilutedValue">$2.39</span>
                </div>
                <div class="result-row">
                    <span class="result-label">Liquidity-Adjusted Value:</span>
                    <span class="result-value" id="finalValue">$2.39</span>
                </div>
                <div class="result-row">
                    <span class="result-label">Intrinsic Value:</span>
                    <span class="result-value" id="intrinsicValue">$1.00</span>
                </div>
                <div class="result-row">
                    <span class="result-label">Time Value:</span>
                    <span class="result-value" id="timeValue">$1.39</span>
                </div>
                <div class="result-row">
                    <span class="result-label">Probability Stock > Strike:</span>
                    <span class="result-value" id="probability">68.2%</span>
                </div>
            </div>
            
            <div class="chart-container">
                <canvas id="priceChart"></canvas>
            </div>
        </div>
        
        <div id="timeAnalysis" class="tab-content">
            <h2>Warrant Price Over Time</h2>
            <p>This table shows how the warrant price changes over time assuming the stock follows a specific path.</p>
            
            <table id="timeTable">
                <thead>
                    <tr>
                        <th>Days Since Listing</th>
                        <th>Stock Price</th>
                        <th>Warrant Price</th>
                        <th>Intrinsic Value</th>
                        <th>Time Value</th>
                        <th>% of Intrinsic</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- This will be filled by JavaScript -->
                </tbody>
            </table>
            
            <div class="chart-container">
                <canvas id="timeChart"></canvas>
            </div>
        </div>
        
        <div id="sensitivity" class="tab-content">
            <h2>Sensitivity Analysis</h2>
            <p>This table shows how the warrant price changes with different stock prices and days since listing.</p>
            
            <div class="sensitivity-table">
                <table id="sensitivityTable">
                    <thead>
                        <tr>
                            <th>Stock Price</th>
                            <th>30 Days</th>
                            <th>60 Days</th>
                            <th>90 Days</th>
                            <th>180 Days</th>
                            <th>365 Days</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- This will be filled by JavaScript -->
                    </tbody>
                </table>
            </div>
            
            <div class="chart-container">
                <canvas id="sensitivityChart"></canvas>
            </div>
        </div>
    </div>

    <script>
        // Function to calculate cumulative normal distribution (approximation)
        function normalCDF(x) {
            const a1 = 0.254829592;
            const a2 = -0.284496736;
            const a3 = 1.421413741;
            const a4 = -1.453152027;
            const a5 = 1.061405429;
            const p = 0.3275911;
            
            const sign = x < 0 ? -1 : 1;
            x = Math.abs(x) / Math.sqrt(2.0);
            
            const t = 1.0 / (1.0 + p * x);
            const y = 1.0 - ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);
            
            return 0.5 * (1.0 + sign * y);
        }
        
        // Black-Scholes warrant pricing function
        function calculateWarrantPrice(S, K, r, sigma, T, dilutionFactor, daysSinceListing, minimumHoldDays, illiquidityDiscount) {
            // Convert percentages to decimals
            r = r / 100;
            sigma = sigma / 100;
            illiquidityDiscount = illiquidityDiscount / 100;
            
            // Basic Black-Scholes calculation
            const d1 = (Math.log(S / K) + (r + sigma * sigma / 2) * T) / (sigma * Math.sqrt(T));
            const d2 = d1 - sigma * Math.sqrt(T);
            
            const nd1 = normalCDF(d1);
            const nd2 = normalCDF(d2);
            
            const bsValue = S * nd1 - K * Math.exp(-r * T) * nd2;
            
            // Apply dilution adjustment
            const dilutedValue = bsValue * dilutionFactor;
            
            // Apply illiquidity discount during minimum hold period
            let finalValue = dilutedValue;
            if (daysSinceListing < minimumHoldDays) {
                finalValue = dilutedValue * (1 - illiquidityDiscount);
            }
            
            // Calculate intrinsic value
            const intrinsicValue = Math.max(0, S - K);
            
            // Calculate time value
            const timeValue = finalValue - intrinsicValue;
            
            // Calculate probability that stock will be above strike at expiration
            const probability = normalCDF(d2) * 100;
            
            return {
                bsValue: bsValue.toFixed(2),
                dilutedValue: dilutedValue.toFixed(2),
                finalValue: finalValue.toFixed(2),
                intrinsicValue: intrinsicValue.toFixed(2),
                timeValue: timeValue.toFixed(2),
                probability: probability.toFixed(1)
            };
        }
        
        // Function to sync range inputs with number inputs
        function syncRange(numberInputId, rangeInputId) {
            const numberInput = document.getElementById(numberInputId);
            const rangeInput = document.getElementById(rangeInputId);
            
            if (event.target.id === rangeInputId) {
                numberInput.value = rangeInput.value;
            } else {
                rangeInput.value = numberInput.value;
            }
            
            if (numberInputId === "daysSinceListing") {
                document.getElementById("daysSinceListingDisplay").textContent = numberInput.value;
            }
            
            updateCalculations();
        }
        
        // Function to update all calculations and displays
        function updateCalculations() {
            const stockPrice = parseFloat(document.getElementById("stockPrice").value);
            const strikePrice = parseFloat(document.getElementById("strikePrice").value);
            const volatility = parseFloat(document.getElementById("volatility").value);
            const riskFreeRate = parseFloat(document.getElementById("riskFreeRate").value);
            const timeToExpiration = parseFloat(document.getElementById("timeToExpiration").value);
            const dilutionFactor = parseFloat(document.getElementById("dilutionFactor").value);
            const daysSinceListing = parseInt(document.getElementById("daysSinceListing").value);
            const minimumHoldDays = parseInt(document.getElementById("minimumHoldDays").value);
            const illiquidityDiscount = parseFloat(document.getElementById("illiquidityDiscount").value);
            
            // Calculate time remaining in years
            const timeRemaining = Math.max(0, timeToExpiration - (daysSinceListing / 365));
            
            // Calculate warrant price
            const results = calculateWarrantPrice(
                stockPrice, 
                strikePrice, 
                riskFreeRate, 
                volatility, 
                timeRemaining, 
                dilutionFactor, 
                daysSinceListing, 
                minimumHoldDays, 
                illiquidityDiscount
            );
            
            // Update results display
            document.getElementById("bsValue").textContent = "$" + results.bsValue;
            document.getElementById("dilutedValue").textContent = "$" + results.dilutedValue;
            document.getElementById("finalValue").textContent = "$" + results.finalValue;
            document.getElementById("intrinsicValue").textContent = "$" + results.intrinsicValue;
            document.getElementById("timeValue").textContent = "$" + results.timeValue;
            document.getElementById("probability").textContent = results.probability + "%";
            
            // Update time analysis table
            updateTimeAnalysisTable();
            
            // Update sensitivity analysis table
            updateSensitivityTable();
        }
        
        // Function to update the time analysis table
        function updateTimeAnalysisTable() {
            const stockPrice = parseFloat(document.getElementById("stockPrice").value);
            const strikePrice = parseFloat(document.getElementById("strikePrice").value);
            const volatility = parseFloat(document.getElementById("volatility").value);
            const riskFreeRate = parseFloat(document.getElementById("riskFreeRate").value);
            const timeToExpiration = parseFloat(document.getElementById("timeToExpiration").value);
            const dilutionFactor = parseFloat(document.getElementById("dilutionFactor").value);
            const minimumHoldDays = parseInt(document.getElementById("minimumHoldDays").value);
            const illiquidityDiscount = parseFloat(document.getElementById("illiquidityDiscount").value);
            
            const timePoints = [1, 15, 30, 45, 60, 90, 180, 365];
            const stockPriceGrowth = 0.5; // Annualized percentage growth of stock price
            
            let tableHtml = '';
            
            for (const days of timePoints) {
                // Calculate projected stock price (simple growth model)
                const projectedStockPrice = stockPrice * (1 + (stockPriceGrowth / 100) * (days / 365));
                
                // Calculate time remaining in years
                const timeRemaining = Math.max(0, timeToExpiration - (days / 365));
                
                // Calculate warrant price
                const results = calculateWarrantPrice(
                    projectedStockPrice, 
                    strikePrice, 
                    riskFreeRate, 
                    volatility, 
                    timeRemaining, 
                    dilutionFactor, 
                    days, 
                    minimumHoldDays, 
                    illiquidityDiscount
                );
                
                // Calculate percentage of intrinsic value
                const percentIntrinsic = parseFloat(results.intrinsicValue) > 0 ? 
                    (parseFloat(results.finalValue) / parseFloat(results.intrinsicValue) * 100).toFixed(1) + "%" : 
                    "N/A";
                
                tableHtml += `
                    <tr>
                        <td>${days}</td>
                        <td>$${projectedStockPrice.toFixed(2)}</td>
                        <td>$${results.finalValue}</td>
                        <td>$${results.intrinsicValue}</td>
                        <td>$${results.timeValue}</td>
                        <td>${percentIntrinsic}</td>
                    </tr>
                `;
            }
            
            document.querySelector('#timeTable tbody').innerHTML = tableHtml;
        }
        
        // Function to update the sensitivity analysis table
        function updateSensitivityTable() {
            const strikePrice = parseFloat(document.getElementById("strikePrice").value);
            const volatility = parseFloat(document.getElementById("volatility").value);
            const riskFreeRate = parseFloat(document.getElementById("riskFreeRate").value);
            const timeToExpiration = parseFloat(document.getElementById("timeToExpiration").value);
            const dilutionFactor = parseFloat(document.getElementById("dilutionFactor").value);
            const minimumHoldDays = parseInt(document.getElementById("minimumHoldDays").value);
            const illiquidityDiscount = parseFloat(document.getElementById("illiquidityDiscount").value);
            
            const stockPrices = [8, 9, 10, 11, 12, 13, 15];
            const timePoints = [30, 60, 90, 180, 365];
            
            let tableHtml = '';
            
            for (const price of stockPrices) {
                tableHtml += `<tr><td>$${price.toFixed(2)}</td>`;
                
                for (const days of timePoints) {
                    // Calculate time remaining in years
                    const timeRemaining = Math.max(0, timeToExpiration - (days / 365));
                    
                    // Calculate warrant price
                    const results = calculateWarrantPrice(
                        price, 
                        strikePrice, 
                        riskFreeRate, 
                        volatility, 
                        timeRemaining, 
                        dilutionFactor, 
                        days, 
                        minimumHoldDays, 
                        illiquidityDiscount
                    );
                    
                    tableHtml += `<td>$${results.finalValue}</td>`;
                }
                
                tableHtml += `</tr>`;
            }
            
            document.querySelector('#sensitivityTable tbody').innerHTML = tableHtml;
        }
        
        // Function to handle tab switching
        function openTab(evt, tabName) {
            const tabContents = document.getElementsByClassName("tab-content");
            for (let i = 0; i < tabContents.length; i++) {
                tabContents[i].classList.remove("active");
            }
            
            const tabs = document.getElementsByClassName("tab");
            for (let i = 0; i < tabs.length; i++) {
                tabs[i].classList.remove("active");
            }
            
            document.getElementById(tabName).classList.add("active");
            evt.currentTarget.classList.add("active");
        }
        
        // Initialize the calculator on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateCalculations();
        });
    </script>
</body>
</html>
